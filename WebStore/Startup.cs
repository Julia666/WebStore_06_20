using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace WebStore
{
    public class Startup

    {   // теперь имея этот объект в приватном поле, мы сможем использовать конфигурацию из файла appsettings.json в двух основных методах ConfigureServices() и Configure()
        private readonly IConfiguration _Configuration; 


        // Извлекаем систему конфигурации через конструктор
        public Startup(IConfiguration Configuration) 
        {
            _Configuration = Configuration; // сохраняем в приватное поле
        }

        // Назначение: взять коллекцию сервисов. Необходимо добавить в эту коллекцию все структурные блоки моего приложения, 
        // которые впоследствии объединятся между собой и будут выполнять задачи бизнес-логики и основного веб-приложения
        // (например, взаимодействие с базой данных, отслеживание куда какой пользователь заходит, система логирования -
        // всё это представлено  внутри моего приложения в виде набора сервисов, которые взаимодействуют между собой).
        // И этот метод определяет, что именно будет работать внутри моего приложения (добавляем сервисы внутрь этой коллекции).
        // После того,как все сервисы зарегистрированы их надо сконфигурировать (метод ниже Configure())
        public void ConfigureServices(IServiceCollection services)
        {
        }

        // Конфигурирует конкретные сервисы. Формирует конвеер, который будет обрабатывать входящие подключения.
        // Здесь с использованием объекта IApplicationBuilder выстраивается последовательность специальных блоков, 
        // которые называются промежуточным программным обеспечением (которые занимаются обработкой входящих подключений в виде конвеера -
        // сперва подключение проходит через 1 блок конвеера, он выполняет свою какую-то часть обработки,
        // затем этот блок передает подключение на следующее звено конвеера, после этого конвеер начинает разворачиваться в обратную сторону
        // и результат,который сформировался на каждом этапе обрастает новыми деталями и в конце уже в виде веб-страницы отправляется пользователю)
        // Таким образом, вызывая методы, обращенные к переменной app  - мы наращиваем структуру этого конвеера.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment()) // подключаем это промежуточное ПО только на стадии разработки
            {
                app.UseDeveloperExceptionPage(); // система обработки исключений (если в процессе обработки входящего запроса происходит ошибка,
                                                 // то эта ошибка распространяется вверх по стеку вызова и перехватывается данной системой,
                                                 // в результате мы увидим специальную html страницу с информацией что пошло не так)
            }

            app.UseRouting(); // подключени системы маршрутизации

            // Добавление специальных обработчиков конечных точек приложения. 
            // Конечная точка - адрес, который мы можем вводить после имени хоста (localhost:5000/HelloWorld/123/asd/zxc - всё что идет после 5000)
            // и которая должна будет выполнить обработку запроса к ней (действия). В этом месте мы как раз и можем определить,
            // что конкретно по каким адресам должно быть выполнено
            app.UseEndpoints(endpoints =>  
            {
                endpoints.MapGet("/greetings", async context =>
                {
                    await context.Response.WriteAsync(_Configuration["CustomGreetings"]); // берем объект _Configuration и извлекаем из него
                                                                                          // значение с названием CustomGreetings
                });

                endpoints.MapGet("/", async context =>  // для корневого адреса (т.е. если ничего не вводить) будет выполнено действие,
                                                        //  которое возвращает Hello World (берет контекст входящего запроса, берет ответ который формируется и в него пишет асинхронно)
                {
                    await context.Response.WriteAsync("Hello World!");
                });
            });
        }
    }
}
